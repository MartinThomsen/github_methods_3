library(reticulate)
print(conda_list())
reticulate::repl_python()
## assignment is done and only done with "=" (no arrows)
Y
exit
library(reticulate)
print(conda_list())
reticulate::repl_python()
## assignment is done and only done with "=" (no arrows)
n
a = 2
# a <- 2 # results in a syntax error
## already assigned variables can be reassigned with basic arithmetic operations
a += 2
print(a)
a -= 1
print(a)
a *= 4
print(a)
a //= 2 # integer division
print(a)
a /= 2 # float  (numeric from R) division
print(a)
a **= 3 # exponentiation
print(a)
a_list = [1, 2] # initiate a list (the square brackets) with the integers 1 and 2
b = a_list ## b now points to a_list, not to a new list with the integers 1 and 2
a_list.append(3) # add a new value to the end of the list
print(a_list)
print(b) # make sure you understand this
print(a_list[0]) # zero-indexing
print(a_list[1])
new_list = [0, 1, 2, 3, 4, 5]
print(new_list[0:3])  # slicing
for index in range(0, 5): # indentation (use tabulation) controls scope of control variables
#(no brackets necessary),
if index == 0: # remember the colon
value = 0
else:
value += index
print(value)
this_is_true = True # logical values
this_is_false = False
# define functions using def
def fix_my_p_value(is_it_supposed_to_be_significant):
if is_it_supposed_to_be_significant:
p = 0.01
else:
p = 0.35
return(p)
print(fix_my_p_value(True))
import numpy # methods of numpy can now be accessed as below
# importing packages (similar to library)
print(numpy.arange(1, 10)) # see the dot
print(numpy.abs(-3))
import numpy as np # you can import them with another name than its default
print(np.cos(np.pi))
from numpy import pi, arange # or you can import specific methods
print(arange(1, 7))
print(pi)
matrix = np.ones(shape=(5, 5)) # create a matrix of ones
identity = np.identity(5) # create an identity matrix (5x5)
identity[:, 2] = 5 # exchange everything in the second column with 5's
## no dots in names - dots indicate applying a method like the dollar sign $ in R
import matplotlib.pyplot as plt
plt.figure() # create new figure
plt.plot([1, 2], [1, 2], 'b-') # plot a blue line
# plt.show() # show figure
plt.plot([2, 1], [2, 1], 'ro') # scatter plot (red)
# plt.show()
plt.xlabel('a label')
plt.title('a title')
plt.legend(['a legend', 'another legend'])
# plt.show()
# Exercise 1.1
import numpy as np
np.random.seed(7) # for reproducibility
x = np.arange(10)
y = 2 * x
y = y.astype(float)
n_samples = len(y)
y += np.random.normal(loc=0, scale=1, size=n_samples)
X = np.zeros(shape=(n_samples, 2))
X[:, 0] = x ** 0
X[:, 1] = x ** 1
# Exercise 1.2
y1 = np.array([3, 2, 7, 6, 9])
y2 = np.array([10, 4, 2, 1, -3])
y3 = np.array([15, -2, 0, 0, 3])
y = np.concatenate((y1, y2, y3))
Sys.getenv()
