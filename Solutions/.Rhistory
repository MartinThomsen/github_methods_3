pacman::p_load(multcomp) # for finding interactions in e.g.  2:3
list <- list.files(path = "data/experiment_1", pattern = "*.csv", full.names=TRUE) # importing all files in a list
df <- ldply(list, read_csv) # making them into one data-frame
df <- df %>%
filter(trial.type == "experiment")
df <- df %>%
mutate(correct = ifelse(target.type == "even" & obj.resp == "e" |
target.type == "odd" & obj.resp == "o", 1, 0))
df <- df %>%
mutate(subject = as.factor(subject)) %>%
mutate(task = as.factor(task)) %>%
mutate(cue = as.factor(cue)) %>%
mutate(pas = as.factor(pas)) %>%
mutate(trial = as.factor(trial)) %>%
mutate(trial.type = as.factor(trial.type)) %>%
mutate(target.frames = as.integer(target.frames))
unique(df$target.contrast)
unique(df$target.frames)
m_pool <- glm(correct ~ target.frames, data = df, family = binomial) # complete pooling model
m_partial_pool <- glmer(correct ~ target.frames + (1|subject), data = df, family = binomial) # partial pooling model
likelihood_function <- function(model, y) {
p <- fitted(model)
y <- y
return(prod(p^y*(1-p)^(1-y)))
}
log_likelihood_function <- function(model, y) {
p <- fitted(model)
y <- y
return(sum(y*log(p)+(1-y)*log(1-p)))
}
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, lmerTest, lme4, gridExtra, dfoptim, readbulk, boot, multcomp)
experiment_df = read_bulk("experiment_1")
experiment_df$trial.type = factor(experiment_df$trial.type)
experiment_df$target.frames = factor(experiment_df$target.frames)
experiment_df$cue = factor(experiment_df$cue)
experiment_df$task = factor(experiment_df$task)
experiment_df$pas <- as.factor(experiment_df$pas)
trial_df <- subset(experiment_df, experiment_df$trial.type == "experiment")
# Create variable and set all to 0
trial_df$correct = 0
# Loop through data and change "correct" to 1 where response matches target type
for(i in 1:length(trial_df$trial.type))
{
if (trial_df$obj.resp[i]== 'o' && trial_df$target.type[i] == 'odd')
{
trial_df$correct[i] = 1
}
else if(trial_df$obj.resp[i]== 'e' && trial_df$target.type[i] == 'even'){
trial_df$correct[i] = 1
}
}
# Set as factor
pooled_model = glm(correct ~ target.frames, data = trial_df, family = "binomial")
partial_model = glm(correct ~ target.frames + (1|subject), data = trial_df, family = "binomial")
# Creating a likelihood function, which takes a model and a vector as input
likelihood_fun <- function(model, y)
{
p <- fitted(model) # extract fitted values
return(prod(p^y*(1-p)^(1-y)))
}
# Creating a logarithmic likelihood function, which takes a model and a vector as input
log_likelihood_fun <- function(model, y)
{
p <- fitted(model) # extract fitted values
return(sum(y*log(p)+(1-y)*log(1-p)))
}
likelihood_fun(pooled_model, trial_df$correct)
log_likelihood_fun(pooled_model, trial_df$correct)
logLik(pooled_model)
likelihood_function(m_pool, df$correct)
log_likelihood_function(m_pool, df$correct)
logLik(m_pool)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, lmerTest, lme4, gridExtra, dfoptim, readbulk, boot, multcomp)
df <- read_bulk("experiment_1")
# Assigning variables to proper class
df$pas <- as.factor(df$pas)
df$trial <- as.character(df$trial)
df$target.contrast <- as.numeric(df$target.contrast)
df$cue <- as.character(df$cue)
df$rt.subj <- as.numeric(df$rt.subj)
df$rt.obj <- as.numeric(df$rt.obj)
df$target.contrast <- as.numeric(df$target.contrast)
df$target.frames <- as.integer(df$target.frames)
df$subject <- as.factor(df$subject)
df <- df %>%
filter(trial.type == "experiment")
# Adding empty variable
df <- df %>%
mutate(obj.resp.2 = obj.resp)
# Renaming rows in obj.resp.2 to get same units as target.type
df$obj.resp.2 <- replace(df$obj.resp.2, df$obj.resp.2 == "e", "even")
df$obj.resp.2 <- replace(df$obj.resp.2, df$obj.resp.2 == "o", "odd")
# Adding value for correct and incorrect answers
df_correct <- df %>%
filter(obj.resp.2 == target.type) %>%
mutate(correct = "1")
# Joining with my df
df <- left_join(df, df_correct)
# Remaining are NAs, so replace with 0
df$correct <- replace(df$correct, is.na(df$correct), "0")
# Treating as numeric, otherwise i get an error later on
df$correct <- as.numeric(df$correct)
m1_pooled <- glm(correct ~ target.frames, data = df, family = "binomial")
m1_partial <- glmer(correct ~ target.frames + (1|subject), data = df, family = "binomial")
likelihood_fun <- function(i) {
p <- fitted(i) # Vector of fitted values
y <- as.vector(model.response(model.frame(i), type = "numeric")) # Observed y-values
likelihood <- prod(p^y*(1-p)^(1-y)) # The likelihood function for logistic regression
return(likelihood)
}
log_likelihood_fun <- function(i) {
p <- fitted(i) # Vector of fitted values
y <- as.vector(model.response(model.frame(i), type = "numeric")) # Observed y-values
log_likelihood <- sum(y*log(p)+(1-y)*log(1-p)) # The log-likelihood function for logistic regression
return(log_likelihood)
}
likelihood_fun(m1_pooled)
log_likelihood_fun(m1_pooled)
logLik(m1_pooled)
log_likelihood_fun(m1_partial)
logLik(m1_partial)
class(trial_df$correct)
class(df$correct)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, lmerTest, lme4, gridExtra, dfoptim, readbulk, boot, multcomp)
experiment_df = read_bulk("experiment_1")
experiment_df$trial.type = factor(experiment_df$trial.type)
experiment_df$target.frames = factor(experiment_df$target.frames)
experiment_df$cue = factor(experiment_df$cue)
experiment_df$task = factor(experiment_df$task)
experiment_df$pas <- as.factor(experiment_df$pas)
trial_df <- subset(experiment_df, experiment_df$trial.type == "experiment")
# Create variable and set all to 0
trial_df$correct = 0
# Loop through data and change "correct" to 1 where response matches target type
for(i in 1:length(trial_df$trial.type))
{
if (trial_df$obj.resp[i]== 'o' && trial_df$target.type[i] == 'odd')
{
trial_df$correct[i] = 1
}
else if(trial_df$obj.resp[i]== 'e' && trial_df$target.type[i] == 'even'){
trial_df$correct[i] = 1
}
}
pooled_model = glm(correct ~ target.frames, data = trial_df, family = "binomial")
partial_model = glm(correct ~ target.frames + (1|subject), data = trial_df, family = "binomial")
# Creating a likelihood function, which takes a model and a vector as input
likelihood_fun <- function(model, y)
{
p <- fitted(model) # extract fitted values
return(prod(p^y*(1-p)^(1-y)))
}
# Creating a logarithmic likelihood function, which takes a model and a vector as input
log_likelihood_fun <- function(model, y)
{
p <- fitted(model) # extract fitted values
return(sum(y*log(p)+(1-y)*log(1-p)))
}
likelihood_fun(pooled_model, trial_df$correct)
log_likelihood_fun(pooled_model, trial_df$correct)
logLik(pooled_model)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, plyr, lme4, lmerTest, EnvStats, rstanarm, interactions)
pacman::p_load(multcomp) # for finding interactions in e.g.  2:3
list <- list.files(path = "data/experiment_1", pattern = "*.csv", full.names=TRUE) # importing all files in a list
df <- ldply(list, read_csv) # making them into one data-frame
df <- df %>%
filter(trial.type == "experiment")
df <- df %>%
mutate(correct = ifelse(target.type == "even" & obj.resp == "e" |
target.type == "odd" & obj.resp == "o", 1, 0))
df <- df %>%
mutate(subject = as.factor(subject)) %>%
mutate(task = as.factor(task)) %>%
mutate(cue = as.factor(cue)) %>%
mutate(pas = as.factor(pas)) %>%
mutate(trial = as.factor(trial)) %>%
mutate(trial.type = as.factor(trial.type)) %>%
mutate(target.frames = as.integer(target.frames))
unique(df$target.contrast)
unique(df$target.frames)
m_pool <- glm(correct ~ target.frames, data = df, family = binomial) # complete pooling model
m_partial_pool <- glmer(correct ~ target.frames + (1|subject), data = df, family = binomial) # partial pooling model
likelihood_function <- function(model, y) {
p <- fitted(model)
y <- y
return(prod(p^y*(1-p)^(1-y)))
}
log_likelihood_function <- function(model, y) {
p <- fitted(model)
y <- y
return(sum(y*log(p)+(1-y)*log(1-p)))
}
likelihood_function(m_pool, df$correct)
log_likelihood_function(m_pool, df$correct)
logLik(m_pool)
logLik(m_partial_pool)
log_likelihood_function(m_partial_pool, df$correct)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, lmerTest, lme4, gridExtra, dfoptim, readbulk, boot, multcomp)
experiment_df = read_bulk("experiment_1")
experiment_df$trial.type = factor(experiment_df$trial.type)
experiment_df$cue = factor(experiment_df$cue)
experiment_df$task = factor(experiment_df$task)
experiment_df$pas <- as.factor(experiment_df$pas)
trial_df <- subset(experiment_df, experiment_df$trial.type == "experiment")
# Create variable and set all to 0
trial_df$correct = 0
# Loop through data and change "correct" to 1 where response matches target type
for(i in 1:length(trial_df$trial.type))
{
if (trial_df$obj.resp[i]== 'o' && trial_df$target.type[i] == 'odd')
{
trial_df$correct[i] = 1
}
else if(trial_df$obj.resp[i]== 'e' && trial_df$target.type[i] == 'even'){
trial_df$correct[i] = 1
}
}
pooled_model = glm(correct ~ target.frames, data = trial_df, family = "binomial")
partial_model = glm(correct ~ target.frames + (1|subject), data = trial_df, family = "binomial")
# Creating a likelihood function, which takes a model and a vector as input
likelihood_fun <- function(model, y)
{
p <- fitted(model) # extract fitted values
return(prod(p^y*(1-p)^(1-y)))
}
# Creating a logarithmic likelihood function, which takes a model and a vector as input
log_likelihood_fun <- function(model, y)
{
p <- fitted(model) # extract fitted values
return(sum(y*log(p)+(1-y)*log(1-p)))
}
likelihood_fun(pooled_model, trial_df$correct)
log_likelihood_fun(pooled_model, trial_df$correct)
logLik(pooled_model)
log_likelihood_fun(partial_model, trial_df$correct)
logLik(partial_model)
experiment_df$trial.type = factor(experiment_df$trial.type)
experiment_df$cue = factor(experiment_df$cue)
experiment_df$task = factor(experiment_df$task)
experiment_df$pas = factor(experiment_df$pas)
experiment_df$subject = factor(experiment_df$subject)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, lmerTest, lme4, gridExtra, dfoptim, readbulk, boot, multcomp)
experiment_df = read_bulk("experiment_1")
experiment_df$trial.type = factor(experiment_df$trial.type)
experiment_df$cue = factor(experiment_df$cue)
experiment_df$task = factor(experiment_df$task)
experiment_df$pas = factor(experiment_df$pas)
experiment_df$subject = factor(experiment_df$subject)
trial_df <- subset(experiment_df, experiment_df$trial.type == "experiment")
# Create variable and set all to 0
trial_df$correct = 0
# Loop through data and change "correct" to 1 where response matches target type
for(i in 1:length(trial_df$trial.type))
{
if (trial_df$obj.resp[i]== 'o' && trial_df$target.type[i] == 'odd')
{
trial_df$correct[i] = 1
}
else if(trial_df$obj.resp[i]== 'e' && trial_df$target.type[i] == 'even'){
trial_df$correct[i] = 1
}
}
pooled_model = glm(correct ~ target.frames, data = trial_df, family = "binomial")
partial_model = glm(correct ~ target.frames + (1|subject), data = trial_df, family = "binomial")
log_likelihood_fun(partial_model, trial_df$correct)
logLik(partial_model)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, lmerTest, lme4, gridExtra, dfoptim, readbulk, boot, multcomp)
experiment_df = read_bulk("experiment_1")
experiment_df$trial.type = factor(experiment_df$trial.type)
experiment_df$cue = factor(experiment_df$cue)
experiment_df$task = factor(experiment_df$task)
experiment_df$pas = factor(experiment_df$pas)
experiment_df$subject = factor(experiment_df$subject)
trial_df <- subset(experiment_df, experiment_df$trial.type == "experiment")
# Create variable and set all to 0
trial_df$correct = 0
# Loop through data and change "correct" to 1 where response matches target type
for(i in 1:length(trial_df$trial.type))
{
if (trial_df$obj.resp[i]== 'o' && trial_df$target.type[i] == 'odd')
{
trial_df$correct[i] = 1
}
else if(trial_df$obj.resp[i]== 'e' && trial_df$target.type[i] == 'even'){
trial_df$correct[i] = 1
}
}
pooled_model = glm(correct ~ target.frames, data = trial_df, family = "binomial")
partial_model = glm(correct ~ target.frames + (1|subject), data = trial_df, family = "binomial")
log_likelihood_fun(partial_model, trial_df$correct)
logLik(partial_model)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, lmerTest, lme4, gridExtra, dfoptim, readbulk, boot, multcomp)
experiment_df = read_bulk("experiment_1")
experiment_df$trial.type = factor(experiment_df$trial.type)
experiment_df$cue = factor(experiment_df$cue)
experiment_df$task = factor(experiment_df$task)
experiment_df$pas = factor(experiment_df$pas)
experiment_df$subject = factor(experiment_df$subject)
trial_df <- subset(experiment_df, experiment_df$trial.type == "experiment")
# Create variable and set all to 0
trial_df$correct = 0
# Loop through data and change "correct" to 1 where response matches target type
for(i in 1:length(trial_df$trial.type))
{
if (trial_df$obj.resp[i]== 'o' && trial_df$target.type[i] == 'odd')
{
trial_df$correct[i] = 1
}
else if(trial_df$obj.resp[i]== 'e' && trial_df$target.type[i] == 'even'){
trial_df$correct[i] = 1
}
}
pooled_model = glm(correct ~ target.frames, data = trial_df, family = "binomial")
partial_model = glm(correct ~ target.frames + (1|subject), data = trial_df, family = "binomial")
class(experiment_df$target.frames)
class(experiment_df$subject)
partial_model = glm(correct ~ target.frames + (1|subject), data = trial_df, family = "binomial")
partial_model = glm(correct ~ target.frames + (1|subject), data = trial_df, family = binomial)
pooled_model = glm(correct ~ target.frames, data = trial_df, family = binomial)
partial_model = glm(correct ~ target.frames + (1|subject), data = trial_df, family = binomial)
View(trial_df)
experiment_df = read_bulk("experiment_1")
experiment_df$trial.type = factor(experiment_df$trial.type)
experiment_df$cue = factor(experiment_df$cue)
experiment_df$task = factor(experiment_df$task)
experiment_df$pas = factor(experiment_df$pas)
experiment_df$subject = factor(experiment_df$subject)
trial_df <- subset(experiment_df, experiment_df$trial.type == "experiment")
# Create variable and set all to 0
trial_df$correct = 0
# Loop through data and change "correct" to 1 where response matches target type
for(i in 1:length(trial_df$trial.type))
{
if (trial_df$obj.resp[i]== 'o' && trial_df$target.type[i] == 'odd')
{
trial_df$correct[i] = 1
}
else if(trial_df$obj.resp[i]== 'e' && trial_df$target.type[i] == 'even'){
trial_df$correct[i] = 1
}
}
pooled_model = glm(correct ~ target.frames, data = trial_df, family = binomial)
partial_model = glm(correct ~ target.frames + (1|subject), data = trial_df, family = binomial)
View(trial_df)
unique(trial_df$seed)
View(experiment_df)
ff = subset(trial_df, trial_df$seed == "NA")
View(ff)
ff = subset(trial_df, trial_df$seed == NA)
unique(trial_df$seed)
experiment_df$seed = []
experiment_df$seed = 0
experiment_df$seed = 0
experiment_df$trial.type = factor(experiment_df$trial.type)
experiment_df$cue = factor(experiment_df$cue)
experiment_df$task = factor(experiment_df$task)
experiment_df$pas = factor(experiment_df$pas)
experiment_df$subject = factor(experiment_df$subject)
trial_df <- subset(experiment_df, experiment_df$trial.type == "experiment")
# Create variable and set all to 0
trial_df$correct = 0
# Loop through data and change "correct" to 1 where response matches target type
for(i in 1:length(trial_df$trial.type))
{
if (trial_df$obj.resp[i]== 'o' && trial_df$target.type[i] == 'odd')
{
trial_df$correct[i] = 1
}
else if(trial_df$obj.resp[i]== 'e' && trial_df$target.type[i] == 'even'){
trial_df$correct[i] = 1
}
}
pooled_model = glm(correct ~ target.frames, data = trial_df, family = binomial)
partial_model = glm(correct ~ target.frames + (1|subject), data = trial_df, family = binomial)
unique(trial_df$seed)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, lmerTest, lme4, gridExtra, dfoptim, readbulk, boot, multcomp)
experiment_df = read_bulk("experiment_1")
experiment_df$trial.type = factor(experiment_df$trial.type)
experiment_df$cue = factor(experiment_df$cue)
experiment_df$task = factor(experiment_df$task)
experiment_df$pas = factor(experiment_df$pas)
trial_df <- subset(experiment_df, experiment_df$trial.type == "experiment")
# Create variable and set all to 0
trial_df$correct = 0
# Loop through data and change "correct" to 1 where response matches target type
for(i in 1:length(trial_df$trial.type))
{
if (trial_df$obj.resp[i]== 'o' && trial_df$target.type[i] == 'odd')
{
trial_df$correct[i] = 1
}
else if(trial_df$obj.resp[i]== 'e' && trial_df$target.type[i] == 'even'){
trial_df$correct[i] = 1
}
}
pooled_model = glm(correct ~ target.frames, data = trial_df, family = binomial)
partial_model = glm(correct ~ target.frames + (1|subject), data = trial_df, family = binomial)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, lmerTest, lme4, gridExtra, dfoptim, readbulk, boot, multcomp)
experiment_df = read_bulk("experiment_1")
experiment_df$trial.type = factor(experiment_df$trial.type)
experiment_df$cue = factor(experiment_df$cue)
experiment_df$task = factor(experiment_df$task)
experiment_df$pas = factor(experiment_df$pas)
trial_df <- subset(experiment_df, experiment_df$trial.type == "experiment")
# Create variable and set all to 0
trial_df$correct = 0
# Loop through data and change "correct" to 1 where response matches target type
for(i in 1:length(trial_df$trial.type))
{
if (trial_df$obj.resp[i]== 'o' && trial_df$target.type[i] == 'odd')
{
trial_df$correct[i] = 1
}
else if(trial_df$obj.resp[i]== 'e' && trial_df$target.type[i] == 'even'){
trial_df$correct[i] = 1
}
}
pooled_model = glm(correct ~ target.frames, data = trial_df, family = binomial)
partial_model = glm(correct ~ target.frames + (1|subject), data = trial_df, family = binomial)
# Creating a likelihood function, which takes a model and a vector as input
likelihood_fun <- function(model, y)
{
p <- fitted(model) # extract fitted values
return(prod(p^y*(1-p)^(1-y)))
}
# Creating a logarithmic likelihood function, which takes a model and a vector as input
log_likelihood_fun <- function(model, y)
{
p <- fitted(model) # extract fitted values
return(sum(y*log(p)+(1-y)*log(1-p)))
}
likelihood_fun(pooled_model, trial_df$correct)
log_likelihood_fun(pooled_model, trial_df$correct)
logLik(pooled_model)
log_likelihood_fun(partial_model, trial_df$correct)
logLik(partial_model)
class(experiment_df$target.frames)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, lmerTest, lme4, gridExtra, dfoptim, readbulk, boot, multcomp)
experiment_df = read_bulk("experiment_1")
experiment_df$trial.type = factor(experiment_df$trial.type)
experiment_df$cue = factor(experiment_df$cue)
experiment_df$task = factor(experiment_df$task)
experiment_df$pas = factor(experiment_df$pas)
experiment_df$subject = factor(experiment_df$subject)
trial_df <- subset(experiment_df, experiment_df$trial.type == "experiment")
# Create variable and set all to 0
trial_df$correct = 0
# Loop through data and change "correct" to 1 where response matches target type
for(i in 1:length(trial_df$trial.type))
{
if (trial_df$obj.resp[i]== 'o' && trial_df$target.type[i] == 'odd')
{
trial_df$correct[i] = 1
}
else if(trial_df$obj.resp[i]== 'e' && trial_df$target.type[i] == 'even'){
trial_df$correct[i] = 1
}
}
pooled_model = glm(correct ~ target.frames, data = trial_df, family = binomial)
partial_model = glm(correct ~ target.frames + (1|subject), data = trial_df, family = binomial)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, lmerTest, lme4, gridExtra, dfoptim, readbulk, boot, multcomp)
experiment_df = read_bulk("experiment_1")
experiment_df$trial.type = factor(experiment_df$trial.type)
experiment_df$cue = factor(experiment_df$cue)
experiment_df$task = factor(experiment_df$task)
experiment_df$pas = factor(experiment_df$pas)
experiment_df$subject = factor(experiment_df$subject)
trial_df <- subset(experiment_df, experiment_df$trial.type == "experiment")
# Create variable and set all to 0
trial_df$correct = 0
# Loop through data and change "correct" to 1 where response matches target type
for(i in 1:length(trial_df$trial.type))
{
if (trial_df$obj.resp[i]== 'o' && trial_df$target.type[i] == 'odd')
{
trial_df$correct[i] = 1
}
else if(trial_df$obj.resp[i]== 'e' && trial_df$target.type[i] == 'even'){
trial_df$correct[i] = 1
}
}
pooled_model = glm(correct ~ target.frames, data = trial_df, family = binomial)
partial_model = glmer(correct ~ target.frames + (1|subject), data = trial_df, family = binomial)
# Creating a likelihood function, which takes a model and a vector as input
likelihood_fun <- function(model, y)
{
p <- fitted(model) # extract fitted values
return(prod(p^y*(1-p)^(1-y)))
}
# Creating a logarithmic likelihood function, which takes a model and a vector as input
log_likelihood_fun <- function(model, y)
{
p <- fitted(model) # extract fitted values
return(sum(y*log(p)+(1-y)*log(1-p)))
}
likelihood_fun(pooled_model, trial_df$correct)
log_likelihood_fun(pooled_model, trial_df$correct)
logLik(pooled_model)
log_likelihood_fun(partial_model, trial_df$correct)
logLik(partial_model)
