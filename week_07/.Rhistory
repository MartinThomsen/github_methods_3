regr.fit(x,y_noise)
regr.fit(x = y_true,y = y_noise)
regr.fit(y_true,y_noise)
quit
reticulate::repl_python()
from sklearn.linear_model import LinearRegression
regr = LinearRegression
samples = [x,y_noise]
regr.fit(samples,y_true)
quit
reticulate::repl_python()
from sklearn.linear_model
regr.fit(x,y_noise)
quit
reticulate::repl_python()
from sklearn.linear_model import LinearRegression
regr = LinearRegression
regr.fit(x,y_noise)
regr.fit(x, y = y_noise)
regr.fit(x = x, y = y_noise)
regr.fit(x, y_noise)
regr.fit(x_input, y_noise)
import numpy as np
import matplotlib.pyplot as plt
x_input = np.arange(start = 0, stop = 6, step = 0.1, dtype=None)
y_true = np.square(x_input)
ynoisy = np.random.normal(3,5,y_true.size)
y_noise = y_true+ynoisy
fig = plt.figure()
plt.plot(x_input,y_true, 'r')
plt.plot(x_input, y_noise, 'bo')
plt.show()
from sklearn.linear_model import LinearRegression
regr = LinearRegression
regr.fit(x_input, y_noise)
y_pred = regr.predict(x)
regr.fit(x_input, y_noise)
regr.fit(x = x_input, y = y_noise)
quit
reticulate::repl_python()
from sklearn.linear_model import LinearRegression
regr = LinearRegression()
regr.fit(x_input, y_noise)
y_pred = regr.predict(x)
regr.fit(x_input, y_noise)
x_input
y_noise
x_input.shape
y_noise.shape
regr.fit(x_input, y_noise)
x_input.reshape(-1,1)
x_input.shape
quit
reticulate::repl_python()
from sklearn.linear_model import LinearRegression
regr = LinearRegression()
x_input = x_input.reshape(-1,1)
regr.fit(x_input, y_noise)
y_pred = regr.predict(x)
quit
reticulate::repl_python()
from sklearn.linear_model import LinearRegression
regr = LinearRegression()
regr.fit(x_input.reshape(-1,1), y_noise)
y_pred = regr.predict(x)
x_input = x_input.reshape(-1,1)
x_input
regr.fit(x_input, y_noise)
y_pred = regr.predict(x)
y_pred = regr.predict(x_input)
plt.plot(x_input, y_pred)
plt.show()
plt.plot(x_input, y_pred, '-b')
plt.show()
quit
reticulate::repl_python()
from sklearn.linear_model import LinearRegression
regr = LinearRegression()
x_input = x_input.reshape(-1,1)
regr.fit(x_input, y_noise)
y_pred = regr.predict(x_input)
plt.plot(x_input, y_pred, '--black')
plt.show()
plt.plot(x_input, y_pred, '--', color = 'black')
quit
reticulate::repl_python()
from sklearn.linear_model import LinearRegression
regr = LinearRegression()
x_input = x_input.reshape(-1,1)
regr.fit(x_input, y_noise)
y_pred = regr.predict(x_input)
plt.plot(x_input, y_pred, '--', color = 'black')
plt.show()
import numpy as np
import matplotlib.pyplot as plt
x_input = np.arange(start = 0, stop = 6, step = 0.1, dtype=None)
y_true = np.square(x_input)
ynoisy = np.random.normal(3,5,y_true.size)
y_noise = y_true+ynoisy
fig = plt.figure()
plt.plot(x_input,y_true, 'r')
plt.plot(x_input, y_noise, 'bo')
plt.show()
from sklearn.linear_model import LinearRegression
regr = LinearRegression()
x_input = x_input.reshape(-1,1)
regr.fit(x_input, y_noise)
y_pred = regr.predict(x_input)
plt.plot(x_input, y_pred, '--', color = 'black')
plt.show()
quit
reticulate::repl_python()
from sklearn.preprocessing import PolynomialFeatures
quadratic = PolynomialFeatures(degree=2)
X_quadratic = quadratic.fit_transform(x_input)
regressor = LinearRegression()
regressor.fit(x_quadratic, y_noise) # what goes in here?
y_quadratic_hat # calculate this
View(X_quadratic)
x_quadratic
x_quadratic
quit
reticulate::repl_python()
from sklearn.preprocessing import PolynomialFeatures
quadratic = PolynomialFeatures(degree=2)
X_quadratic = quadratic.fit_transform(x_input)
regressor = LinearRegression()
regressor.fit(X_quadratic, y_noise) # what goes in here?
y_quadratic_hat # calculate this
quit
reticulate::repl_python()
from sklearn.preprocessing import PolynomialFeatures
quadratic = PolynomialFeatures(degree=2)
X_quadratic = quadratic.fit_transform(x_input)
regressor = LinearRegression()
regressor.fit(X_quadratic, y_noise) # what goes in here?
y_quadratic_hat = regressor.predict(X_quadratic)# calculate this
regressor.fit(X_quadratic, y_noise)
y_quadratic_hat = regressor.predict(X_quadratic)
quit
reticulate::repl_python()
from sklearn.preprocessing import PolynomialFeatures
quadratic = PolynomialFeatures(degree=2)
X_quadratic = quadratic.fit_transform(x_input)
regressor = LinearRegression()
regressor.fit(X_quadratic, y_noise)
y_quadratic_hat = regressor.predict(X_quadratic)
plt.figure()
plt.plot(X_quadratic, y_quadratic_hat)
plt.show()
quit
reticulate::repl_python()
from sklearn.preprocessing import PolynomialFeatures
quadratic = PolynomialFeatures(degree=2)
X_quadratic = quadratic.fit_transform(x_input)
regressor = LinearRegression()
regressor.fit(X_quadratic, y_noise)
y_quadratic_hat = regressor.predict(X_quadratic)
plt.figure()
plt.plot(X_quadratic, y_quadratic_hat)
plt.show()
X_quadratic
X_quadratic.shape
x_input
quit
reticulate::repl_python()
fifth_order = PolynomialFeatures(degree=5)
X_fifth_order = quadratic.fit_transform(x_input)
regressor = LinearRegression()
regressor.fit(X_fifth_order, y_noise)
y_fifth_order_hat = regressor.predict(X_fifth_order)
plt.figure()
plt.plot(X_fifth_order, y_fifth_order_hat)
plt.show()
quit
reticulate::repl_python()
from sklearn.preprocessing import PolynomialFeatures
quadratic = PolynomialFeatures(degree=2)
X_quadratic = quadratic.fit(x_input)
regressor = LinearRegression()
regressor.fit(X_quadratic, y_noise)
y_quadratic_hat = regressor.predict(X_quadratic)
plt.figure()
plt.plot(X_quadratic, y_quadratic_hat)
plt.show()
X_quadratic
X_quadratic = quadratic.fit_transform(x_input)
X_quadratic
plt.show()
quit
reticulate::repl_python()
from sklearn.preprocessing import PolynomialFeatures
quadratic = PolynomialFeatures(degree=2)
X_quadratic = quadratic.fit_transform(x_input)
regressor = LinearRegression()
regressor.fit(X_quadratic, y_noise)
y_quadratic_hat = regressor.predict(X_quadratic)
plt.figure()
plt.plot(X_quadratic, y_quadratic_hat)
plt.show()
quit
reticulate::repl_python()
from sklearn.preprocessing import PolynomialFeatures
quadratic = PolynomialFeatures(degree=2)
X_quadratic = quadratic.fit_transform(x_input)
regressor = LinearRegression()
regressor.fit(X_quadratic, y_noise)
y_quadratic_hat = regressor.predict(X_quadratic)
plt.figure()
plt.plot(x_input, y_quadratic_hat)
plt.show()
quit
reticulate::repl_python()
from sklearn.preprocessing import PolynomialFeatures
quadratic = PolynomialFeatures(degree=2)
X_quadratic = quadratic.fit_transform(x_input)
regressor = LinearRegression()
regressor.fit(X_quadratic, y_noise)
y_quadratic_hat = regressor.predict(X_quadratic)
plt.figure()
plt.plot(x_input, y_quadratic_hat)
plt.plot(x_input, y_true, 'r')
plt.show()
quit
reticulate::repl_python()
from sklearn.preprocessing import PolynomialFeatures
quadratic = PolynomialFeatures(degree=2)
X_quadratic = quadratic.fit_transform(x_input)
regressor = LinearRegression()
regressor.fit(X_quadratic, y_noise)
y_quadratic_hat = regressor.predict(X_quadratic)
plt.figure()
plt.plot(x_input, y_quadratic_hat)
plt.plot(x_input, y_true, 'r')
plt.legend("Quadratic function", "True function")
plt.show()
quit
reticulate::repl_python()
fifth_order = PolynomialFeatures(degree=5)
X_fifth_order = quadratic.fit_transform(x_input)
regressor = LinearRegression()
regressor.fit(X_fifth_order, y_noise)
y_fifth_order_hat = regressor.predict(X_fifth_order)
plt.figure()
plt.plot(x_input, y_fifth_order_hat)
plt.show()
quit
reticulate::repl_python()
fifth_order = PolynomialFeatures(degree=5)
X_fifth_order = quadratic.fit_transform(x_input)
regressor = LinearRegression()
regressor.fit(X_fifth_order, y_noise)
y_fifth_order_hat = regressor.predict(X_fifth_order)
plt.figure()
plt.plot(x_input, y_quadratic_hat)
plt.plot(x_input, y_true, 'r')
plt.plot(x_input, y_fifth_order_hat)
plt.show()
quit
reticulate::repl_python()
fifth_order = PolynomialFeatures(degree=5)
X_fifth_order = quadratic.fit_transform(x_input)
regressor = LinearRegression()
regressor.fit(X_fifth_order, y_noise)
y_fifth_order_hat = regressor.predict(X_fifth_order)
plt.figure()
plt.plot(x_input, y_quadratic_hat, 'b')
plt.plot(x_input, y_true, 'r')
plt.plot(x_input, y_fifth_order_hat, 'g')
plt.show()
quit
reticulate::repl_python()
fifth_order = PolynomialFeatures(degree=5)
X_fifth_order = quadratic.fit_transform(x_input)
regressor = LinearRegression()
regressor.fit(X_fifth_order, y_noise)
y_fifth_order_hat = regressor.predict(X_fifth_order)
plt.figure()
plt.plot(x_input, y_true, 'r')
plt.plot(x_input, y_fifth_order_hat, 'g')
plt.show()
quit
reticulate::repl_python()
fifth_order = PolynomialFeatures(degree=5)
X_fifth_order = quadratic.fit_transform(x_input)
regressor = LinearRegression()
regressor.fit(X_fifth_order, y_noise)
y_fifth_order_hat = regressor.predict(X_fifth_order)
plt.figure()
plt.plot(x_input, y_quadratic_hat, 'b')
plt.plot(x_input, y_fifth_order_hat, 'g')
plt.show()
import numpy as np
import matplotlib.pyplot as plt
x_input = np.arange(start = 0, stop = 6, step = 0.1, dtype=None)
y_true = np.square(x_input)
ynoisy = np.random.normal(3,5,y_true.size)
y_noise = y_true+ynoisy
fig = plt.figure()
plt.plot(x_input,y_true, 'r')
plt.plot(x_input, y_noise, 'bo')
plt.show()
from sklearn.linear_model import LinearRegression
regr = LinearRegression()
x_input = x_input.reshape(-1,1)
regr.fit(x_input, y_noise)
y_pred = regr.predict(x_input)
plt.plot(x_input, y_pred, '--', color = 'black')
plt.show()
from sklearn.preprocessing import PolynomialFeatures
quadratic = PolynomialFeatures(degree=2)
X_quadratic = quadratic.fit_transform(x_input)
regressor = LinearRegression()
regressor.fit(X_quadratic, y_noise)
y_quadratic_hat = regressor.predict(X_quadratic)
plt.figure()
plt.plot(x_input, y_quadratic_hat)
plt.plot(x_input, y_true, 'r')
plt.legend("Quadratic function", "True function")
plt.show()
fifth_order = PolynomialFeatures(degree=5)
X_fifth_order = quadratic.fit_transform(x_input)
regressor = LinearRegression()
regressor.fit(X_fifth_order, y_noise)
y_fifth_order_hat = regressor.predict(X_fifth_order)
plt.plot(x_input, y_fifth_order_hat, 'g')
plt.show()
quit
reticulate::repl_python()
fifth_order = PolynomialFeatures(degree=5)
X_fifth_order = fifth_order.fit_transform(x_input)
regressor = LinearRegression()
regressor.fit(X_fifth_order, y_noise)
y_fifth_order_hat = regressor.predict(X_fifth_order)
plt.plot(x_input, y_fifth_order_hat, 'g')
plt.show()
import numpy as np
import matplotlib.pyplot as plt
x_input = np.arange(start = 0, stop = 6, step = 0.1, dtype=None)
y_true = np.square(x_input)
ynoisy = np.random.normal(3,5,y_true.size)
y_noise = y_true+ynoisy
fig = plt.figure()
plt.plot(x_input,y_true, 'r')
plt.plot(x_input, y_noise, 'bo')
plt.show()
from sklearn.linear_model import LinearRegression
regr = LinearRegression()
x_input = x_input.reshape(-1,1)
regr.fit(x_input, y_noise)
y_pred = regr.predict(x_input)
plt.plot(x_input, y_pred, '--', color = 'black')
plt.show()
from sklearn.preprocessing import PolynomialFeatures
quadratic = PolynomialFeatures(degree=2)
X_quadratic = quadratic.fit_transform(x_input)
regressor = LinearRegression()
regressor.fit(X_quadratic, y_noise)
y_quadratic_hat = regressor.predict(X_quadratic)
plt.figure()
plt.plot(x_input, y_quadratic_hat)
plt.plot(x_input, y_true, 'r')
plt.legend("Quadratic function", "True function")
plt.show()
fifth_order = PolynomialFeatures(degree=5)
X_fifth_order = fifth_order.fit_transform(x_input)
regressor = LinearRegression()
regressor.fit(X_fifth_order, y_noise)
y_fifth_order_hat = regressor.predict(X_fifth_order)
plt.plot(x_input, y_fifth_order_hat, 'g')
plt.show()
quit
reticulate::repl_python()
from sklearn.preprocessing import PolynomialFeatures
quadratic = PolynomialFeatures(degree=2)
X_quadratic = quadratic.fit_transform(x_input)
regressor = LinearRegression()
regressor.fit(X_quadratic, y_noise)
y_quadratic_hat = regressor.predict(X_quadratic)
plt.figure()
plt.plot(x_input, y_quadratic_hat)
plt.plot(x_input, y_true, 'r')
plt.plot(x_input, y_noise, 'ob')
plt.legend("Quadratic function", "True function")
plt.show()
quit
reticulate::repl_python()
fifth_order = PolynomialFeatures(degree=5)
X_fifth_order = fifth_order.fit_transform(x_input)
regressor = LinearRegression()
regressor.fit(X_fifth_order, y_noise)
y_fifth_order_hat = regressor.predict(X_fifth_order)
plt.plot(x_input, y_fifth_order_hat, 'g')
plt.show()
quit
reticulate::repl_python()
for i = 1:100
x[i] = np.random.normal(3,5,len(x_input))
quit
reticulate::repl_python()
for i in 100
x[i] = np.random.normal(3,5,len(x_input))
quit
reticulate::repl_python()
for i in range(1:100)
x[i] = np.random.normal(3,5,len(x_input))
quit
reticulate::repl_python()
for i in 1:100
x[i] = np.random.normal(3,5,len(x_input))
quit
reticulate::repl_python()
for i in 1:100
x[i] = np.random.normal(3,5,len(x_input))
quit
reticulate::repl_python()
for i in 1:100:
x[i] = np.random.normal(3,5,len(x_input))
quit
reticulate::repl_python()
for i in range(100):
x[i] = np.random.normal(3,5,len(x_input))
x.shape
quit
reticulate::repl_python()
for i in range(100):
x[i] = np.random.normal(3,5,100)
quit
for i in range(100):
x[i] = np.random.normal(3,5,len(x_input))
quit
for i in range(100):
x = x + np.random.normal(3,5,len(x_input))
x.shape
x
quit
reticulate::repl_python()
for i in range(100):
x[i] = x + np.random.normal(3,5,len(x_input))
x
quit
reticulate::repl_python()
for i in range(100):
print(i)
quit
for x in range(100):
print(x)
quit
for x in range(100):
x_kk[x] = x_kk + np.random.normal(3,5,len(x_input))
x_kk
quit
reticulate::repl_python()
for x in range(100):
print(x)
quit
for x in range(100):
print(x)
quit
for x in range(100):
print(x)
quit
for x in range(100):
jj[x] = y_true + np.random.normal(3,5,y_true.size)
quit
for x in range(100):
jj = y_true + np.random.normal(3,5,y_true.size)
jj = y_true + np.random.normal(3,5,y_true.size)
quit
reticulate::repl_python()
for x in range(100):
jj =append(y_true + np.random.normal(3,5,y_true.size))
quit
for x in range(100):
jj = np.append(y_true + np.random.normal(3,5,y_true.size))
quit
import numpy as np
import matplotlib.pyplot as plt
x_input = np.arange(start = 0, stop = 6, step = 0.1, dtype=None)
y_true = np.square(x_input)
ynoisy = np.random.normal(3,5,y_true.size)
y_noise = y_true+ynoisy
fig = plt.figure()
plt.plot(x_input,y_true, 'r')
plt.plot(x_input, y_noise, 'bo')
plt.show()
from sklearn.linear_model import LinearRegression
regr = LinearRegression()
x_input = x_input.reshape(-1,1)
regr.fit(x_input, y_noise)
y_pred = regr.predict(x_input)
plt.plot(x_input, y_pred, '--', color = 'black')
plt.show()
from sklearn.preprocessing import PolynomialFeatures
quadratic = PolynomialFeatures(degree=2)
X_quadratic = quadratic.fit_transform(x_input)
regressor = LinearRegression()
regressor.fit(X_quadratic, y_noise)
y_quadratic_hat = regressor.predict(X_quadratic)
plt.figure()
plt.plot(x_input, y_quadratic_hat)
plt.plot(x_input, y_true, 'r')
plt.plot(x_input, y_noise, 'ob')
plt.legend("Quadratic function", "True function")
plt.show()
fifth_order = PolynomialFeatures(degree=5)
X_fifth_order = fifth_order.fit_transform(x_input)
regressor = LinearRegression()
regressor.fit(X_fifth_order, y_noise)
y_fifth_order_hat = regressor.predict(X_fifth_order)
plt.plot(x_input, y_fifth_order_hat, 'g')
plt.show()
